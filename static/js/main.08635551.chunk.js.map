{"version":3,"sources":["components/header/header.js","components/detector/components/box.js","components/detector/components/donut.js","components/detector/components/combined-donuts.js","components/detector/components/track.js","components/detector/components/track-event.js","components/detector/detector.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Fragment","className","Component","Box","meshRef","createRef","this","current","rotation","x","props","ref","position","y","z","args","length","width","height","attach","color","transparent","opacity","Donut","degreesToRadians","degrees","Math","PI","getY","i","sin","radius","getZ","cos","boxProps","Array","from","_","map","prop","key","CombinedDonuts","mesh","useRef","Track","TrackEvent","useDynamicRefs","getRef","setRef","tracksData","event","fTracks","tracksIds","keys","element","toString","useFrame","fPolyX","forEach","id","set","fPolyY","fPolyZ","Detector","camera","OrbitControls","intensity","angle","penumbra","object","THREE","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08635551.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './header.scss'\n\nclass Header extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"header__container\">\n                    <span>Detector</span>\n                    <span>About</span>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component, createRef} from \"react\";\n\n\nexport class Box extends Component {\n    constructor() {\n        super();\n        this.meshRef = createRef();\n    }\n\n    componentDidMount() {\n        this.meshRef.current.rotation.x = this.props.rotation;\n    }\n\n    render() {\n        return (\n            <mesh ref={this.meshRef} position={[this.props.x, this.props.y, this.props.z]}>\n                <boxBufferGeometry args={[this.props.length, this.props.width, this.props.height]}/>\n                <meshLambertMaterial attach=\"material\" color={this.props.color} transparent={true} opacity={0.7}/>\n            </mesh>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {Box} from \"./box\";\n\n\nexport class Donut extends Component {\n    constructor(props) {\n        super();\n\n        const degreesToRadians = (degrees) => (Math.PI / 180) * degrees;\n        const getY = (i) => Math.sin(degreesToRadians(i * 20)) * props.radius;\n        const getZ = (i) => Math.cos(degreesToRadians(i * 20)) * props.radius;\n\n        this.boxProps = Array.from(Array(19), (_, i) => ({x: 0, y: getY(i), z: getZ(i), rotation: degreesToRadians(360 - i * 20)}));\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <mesh>\n                    {this.boxProps.map((prop, i) =>\n                        <Box\n                            {...prop}\n                            key={i}\n                            color={this.props.color}\n                            width={this.props.width}\n                            height={this.props.height}\n                            length={this.props.length}\n                        />)\n                    }\n                </mesh>\n            </React.Fragment>\n        )\n    }\n}\n","import {Donut} from \"./donut\";\nimport React, {useRef} from \"react\";\nimport {useFrame} from \"react-three-fiber\";\n\n\nexport const INNER_DONUT_COLOR = '#4DED30'\nexport const INNER_DONUT_RADIUS = 2;\nexport const INNER_BOX_WIDTH = 0.4;\nexport const INNER_BOX_HEIGHT = 1.5;\nexport const INNER_BOX_LENGTH = 8;\n\nexport const MIDDLE_DONUT_COLOR = '#949494'\nexport const MIDDLE_DONUT_RADIUS = 3.2;\nexport const MIDDLE_BOX_WIDTH = 0.95;\nexport const MIDDLE_BOX_HEIGHT = 0.55;\nexport const MIDDLE_BOX_LENGTH = 8;\n\nexport const OUTER_DONUT_COLOR = '#EE2400'\nexport const OUTER_DONUT_RADIUS = 3.6;\nexport const OUTER_BOX_WIDTH = 1.29;\nexport const OUTER_BOX_HEIGHT = 0.1;\nexport const OUTER_BOX_LENGTH = 8;\n\n\nconst CombinedDonuts = () => {\n    const mesh = useRef();\n    // useFrame(() => mesh.current.rotation.y += 0.01);\n\n    return (\n        <mesh ref={mesh}>\n            <Donut\n                color={INNER_DONUT_COLOR}\n                radius={INNER_DONUT_RADIUS}\n                width={INNER_BOX_WIDTH}\n                height={INNER_BOX_HEIGHT}\n                length={INNER_BOX_LENGTH}\n            />\n            <Donut\n                color={MIDDLE_DONUT_COLOR}\n                radius={MIDDLE_DONUT_RADIUS}\n                width={MIDDLE_BOX_WIDTH}\n                height={MIDDLE_BOX_HEIGHT}\n                length={MIDDLE_BOX_LENGTH}\n            />\n            <Donut\n                color={OUTER_DONUT_COLOR}\n                radius={OUTER_DONUT_RADIUS}\n                width={OUTER_BOX_WIDTH}\n                height={OUTER_BOX_HEIGHT}\n                length={OUTER_BOX_LENGTH}\n            />\n        </mesh>\n    );\n}\n\nexport default CombinedDonuts;\n","import React, {Component} from \"react\";\n\n\nexport class Track extends Component {\n    constructor(props) {\n        super();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <mesh>\n                    <sphereBufferGeometry args={[0.2, 10, 10]}/>\n                    <meshLambertMaterial attach=\"material\" color=\"red\"/>\n                </mesh>\n            </React.Fragment>\n        )\n    }\n}\n","import React from 'react';\nimport event from '../../../utils/events/event35_run226466.json';\nimport {useFrame} from \"react-three-fiber\";\nimport {Track} from \"./track\";\nimport useDynamicRefs from 'use-dynamic-refs';\n\n\nconst TrackEvent = () => {\n    const [getRef, setRef] = useDynamicRefs();\n\n    const tracksData = event.fTracks;\n    const tracksIds = Array.from(Array(tracksData.length).keys()).map(element => element.toString());\n\n    let position = 0;\n\n    useFrame(() => {\n        if (position < tracksData[0].fPolyX.length) {\n            tracksIds.forEach((id, i) => {\n               const ref = getRef(id);\n               ref.current.position.set(\n                   tracksData[i].fPolyX[position] / 40,\n                   tracksData[i].fPolyY[position] / 40,\n                   tracksData[i].fPolyZ[position] / 40,\n               );\n            });\n\n            position++;\n        } else if (position === tracksData[0].fPolyX.length) {\n            position = 0;\n        }\n    });\n\n    return (\n        <React.Fragment>\n            {tracksIds.map((id, i) => (\n                <mesh ref={setRef(id)} key={i}>\n                    <Track/>\n                </mesh>\n            ))}\n        </React.Fragment>\n    )\n}\n\nexport default TrackEvent;\n","import React from 'react';\nimport './detector.scss'\nimport {Canvas} from \"react-three-fiber\";\nimport {OrbitControls} from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport CombinedDonuts from \"./components/combined-donuts\";\nimport TrackEvent from \"./components/track-event\";\n\n\nconst Detector = () => {\n    return (\n        <React.Fragment>\n            <div className=\"detector__container\">\n                <Canvas camera={{position: [10, 6, 10]}}>\n                    <OrbitControls/>\n                    <ambientLight intensity={0.1}/>\n                    <spotLight position={[100, 100, 100]} angle={0.15} penumbra={1}/>\n                    <primitive object={new THREE.AxesHelper(1000)} />\n                    <CombinedDonuts/>\n                    <TrackEvent/>\n                </Canvas>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Detector;\n","import './App.scss';\nimport Header from \"./components/header/header\";\nimport Detector from \"./components/detector/detector\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Detector/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}